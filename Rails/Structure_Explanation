MODEL:
ApplicationRecord < ActiveRecord::Base - toma conta da perstistência no banco de dados, faz a comunicação do bancado de dados a uma classe
    - no rails console é possível fazer a busca nos bancos dados com comandos como Customer.first, que acessa o "Primeiro cliente" no banco de dados e listar
    isso é um trabalho do framework ActiveRecord
    - Obs: quando chamamos todos os elementos exemplo Customer.all, ele lista como um vetor, ou seja, uma array neste formato [#<....., ...., ... >, #<..... ..., .... >]
    mas quando um elemento apenas é chamado, esse elemento não vai ser um vetor.

Formas de usar ActiveRecord:
    -


CONTROLER
ApplicationController < ActionController::Base

class CustomersController < ApplicationController

def action (reflete no view com o mesmo nome)
    code

Before_Action: No app/COntroller Ações que se realizam antes das ações abaixo ex: index, create.


VIEW

_sua_partial.html.erb: estrutram códigos compartilhados a serem aproveitados, como no exemplo ma view new/edit que compartilham _form.html.erb


Active Record:
Responsável por estar migrando, tudo que está no banco de dados e utilizando através de objetos

Comandos:

Name.all // Name.all[1]=> Retorna todos os dados do banco de dados // Específico []
Name.where(:id => 1) // Name.where(id: 1) => atribui o dado específico

CRIANDO / PERSISTINDO DADOS

Name.create(name: "fulano", email: "xxxx@yyy.com", birthday: "xx/yy/zz", obs: "hauhasuhauuhs"

x = Name.new irá instanciar objetos e depois ser possível preencher os dados: x.name = "fulano" // assim como x.email, x.birthday, etc




