Explicação sobre pastas:

APP - model/view/controler se encontra aqui
Bin - bundle e
Config - config de ambientes, inicializadores, e deve ser configurado logo que se cria o projeto, Pois é nele que estará os parametros para o BD
  -rails server -> entra automaticamente no modo app_development, se quiser alternar para production, text por ex, comando ex -> rails s -e production
db - banco da dados
  - PostgreSQL: sudo -i -u postgres (entra no seu usuário), psql (loga)

lib - bibliotecas da aplicação
log - retorno de informações do que está sendo feito
public - única pasta que fica disponível para o usuário final
test - criar formas de testes para aplicação
tmp - arquivos temporários
vendor - arquivos de terceiros
----------------------------------------
BASIC RAILS COMANDS:

rails new mvc_test
rails new "nome do app"="Nnome_do_bd" (especificar o banco de dados)
rails g scaffold User name email ##Cria arquivos de inserção User e Email no MVC
rails db:create db:migrate  #Descreve o que vai ser criado/alterado no banco de dados, em relação aos campos e tabelas. Cria o banco de dados, e migrar o banco de dados (transformar em SQL)

rake db:create - cria no banco de dados bancos de dados development e test

BASIC DB COMANDS:
psql - roda o banco de dados (POSTGRESQL)
\c "nome_banco" - conecta ao banco de dados selecionado
\d "nome_banco" - mostra estutura da tabela do banco
SELECT * FROM 'nome_tabela'; - recupera os dados específicos da tabela e mostra

2 - dica importante - Máquinas não conversam de forma gráfica. Ao digitar uma URL e dar entender, há inevitavelmente uma request do tipo GET
 REST (é um estilo arquitetônico aplicado para fornecer padrões entre sistemas de computador na web, facilitando a comunicação entre eles.)

Pontos importantes:

RAKE: executa procedimentos base
CRUD: create, read, update, delete
SCAFFOLD: Cria uma base do projeto com atributos desejados

Embedded Ruby - template que mistura ruby com texto (erb)
<% %> - essa tag permite colocar códigos ruby dentro do html, mas obs importante: códigos que não há saída, ou seja, que não modifiquem visualmente o html
<%= %> - para que haja modificação se adiciona o "=" na primeira tag



obs:  uma request só chega no controller se houver uma rota que leve (URL)
      Rest - criação. No ano 2000 só tinhamos dois verbos, get/post, e apesar de tudo poder ser feito com esses dois verbos, havia uma falta de semântica para
      repreesntar bem o que se estava fazendo na internet. Deveria então ser criado o Put e o Delete.


Explicando o Routes com resources :customers


Active Record

